name: üêõ Fix race condition in metadata file operations
description: Fix potential race condition in metadata management that could lead to data corruption
title: "[Hacktoberfest]: Fix race condition in metadata file operations"
labels: ["hacktoberfest", "hacktoberfest-accepted", "good first issue", "bug", "security"]
body:
  - type: markdown
    attributes:
      value: |
        üéâ Welcome to Hacktoberfest! Thank you for considering contributing to Wooak.
        
        This template is specifically for Hacktoberfest contributors. Please read our [Contributing Guidelines](CONTRIBUTING.md) and [Code of Conduct](CODE_OF_CONDUCT.md) before getting started.

  - type: dropdown
    id: contribution_type
    attributes:
      label: Contribution Type
      description: What type of contribution are you planning to make?
      options:
        - Bug Fix
        - New Feature
        - Documentation
        - Code Refactoring
        - Test Coverage
        - Performance Improvement
        - Security Enhancement
        - UI/UX Improvement
    validations:
      required: true

  - type: dropdown
    id: difficulty
    attributes:
      label: Difficulty Level
      description: How would you rate the difficulty of this contribution?
      options:
        - Beginner - Good first issue
        - Intermediate - Some experience needed
        - Advanced - Requires deep knowledge
    validations:
      required: true

  - type: textarea
    id: description
    attributes:
      label: Contribution Description
      description: Describe what you plan to contribute
      placeholder: Provide a clear description of your planned contribution...
    validations:
      required: true

  - type: textarea
    id: motivation
    attributes:
      label: Motivation
      description: Why are you interested in contributing to this project?
      placeholder: Tell us what motivated you to contribute to Wooak...

  - type: textarea
    id: experience
    attributes:
      label: Relevant Experience
      description: What experience do you have with Go, SSH, or similar technologies?
      placeholder: Describe your relevant technical experience...

  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-contribution Checklist
      description: Please confirm you've completed these steps
      options:
        - label: I have read the Contributing Guidelines
          required: true
        - label: I have read the Code of Conduct
          required: true
        - label: I have checked existing issues to avoid duplicates
          required: true
        - label: I understand this is a Hacktoberfest contribution
          required: true

  - type: checkboxes
    id: terms
    attributes:
      label: Agreement
      description: By submitting this issue, you agree to follow our guidelines
      options:
        - label: I agree to follow this project's Code of Conduct
          required: true
        - label: I understand that quality contributions are valued over quantity
          required: true

  - type: markdown
    attributes:
      value: |
        ## üêõ Issue Description
        
        The metadata manager in `internal/adapters/data/ssh_config_file/metadata_manager.go` has a potential race condition when multiple processes try to write to the metadata file simultaneously.
        
        **Current Issue:**
        - `saveAll()` function doesn't use atomic file operations
        - Could lead to data corruption or lost metadata
        - No file locking mechanism
        
        **Expected Solution:**
        - Implement atomic file operations using temporary files
        - Add file locking mechanism
        - Ensure data consistency during concurrent access
        
        **Files to Modify:**
        - `internal/adapters/data/ssh_config_file/metadata_manager.go`
        - Add tests for concurrent access scenarios
        
        **Acceptance Criteria:**
        - [ ] Implement atomic file operations
        - [ ] Add file locking mechanism
        - [ ] Add concurrent access tests
        - [ ] Ensure no data loss during concurrent writes
        - [ ] Update documentation
        
        **Difficulty:** Medium
        **Estimated Time:** 4-6 hours
        
        ## üéØ Technical Details
        
        The issue is in the `saveAll` function around line 67-85. Currently, it directly writes to the metadata file without proper synchronization, which could cause data corruption if multiple instances of Wooak are running simultaneously.
        
        **Suggested Approach:**
        1. Use temporary files for atomic writes
        2. Implement file locking using `flock` or similar
        3. Add retry logic for failed operations
        4. Create comprehensive tests for concurrent scenarios
        
        ## üìö Resources
        - [Go file operations best practices](https://golang.org/pkg/os/#File)
        - [Atomic file operations in Go](https://golang.org/pkg/os/#Rename)
        - [File locking in Go](https://golang.org/pkg/syscall/#Flock)
