name: âœ¨ Implement OpenAI API integration for AI service
description: Implement OpenAI API integration to support multiple AI providers
title: "[Hacktoberfest]: Implement OpenAI API integration for AI service"
labels: ["hacktoberfest", "hacktoberfest-accepted", "good first issue", "enhancement", "ai"]
body:
  - type: markdown
    attributes:
      value: |
        ðŸŽ‰ Welcome to Hacktoberfest! Thank you for considering contributing to Wooak.
        
        This template is specifically for Hacktoberfest contributors. Please read our [Contributing Guidelines](CONTRIBUTING.md) and [Code of Conduct](CODE_OF_CONDUCT.md) before getting started.

  - type: dropdown
    id: contribution_type
    attributes:
      label: Contribution Type
      description: What type of contribution are you planning to make?
      options:
        - Bug Fix
        - New Feature
        - Documentation
        - Code Refactoring
        - Test Coverage
        - Performance Improvement
        - Security Enhancement
        - UI/UX Improvement
    validations:
      required: true

  - type: dropdown
    id: difficulty
    attributes:
      label: Difficulty Level
      description: How would you rate the difficulty of this contribution?
      options:
        - Beginner - Good first issue
        - Intermediate - Some experience needed
        - Advanced - Requires deep knowledge
    validations:
      required: true

  - type: textarea
    id: description
    attributes:
      label: Contribution Description
      description: Describe what you plan to contribute
      placeholder: Provide a clear description of your planned contribution...
    validations:
      required: true

  - type: textarea
    id: motivation
    attributes:
      label: Motivation
      description: Why are you interested in contributing to this project?
      placeholder: Tell us what motivated you to contribute to Wooak...

  - type: textarea
    id: experience
    attributes:
      label: Relevant Experience
      description: What experience do you have with Go, SSH, or similar technologies?
      placeholder: Describe your relevant technical experience...

  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-contribution Checklist
      description: Please confirm you've completed these steps
      options:
        - label: I have read the Contributing Guidelines
          required: true
        - label: I have read the Code of Conduct
          required: true
        - label: I have checked existing issues to avoid duplicates
          required: true
        - label: I understand this is a Hacktoberfest contribution
          required: true

  - type: checkboxes
    id: terms
    attributes:
      label: Agreement
      description: By submitting this issue, you agree to follow our guidelines
      options:
        - label: I agree to follow this project's Code of Conduct
          required: true
        - label: I understand that quality contributions are valued over quantity
          required: true

  - type: markdown
    attributes:
      value: |
        ## âœ¨ Issue Description
        
        The AI service currently has a placeholder for OpenAI integration. This needs to be implemented to support multiple AI providers and give users more options for AI-powered features.
        
        **Current Issue:**
        - `makeOpenAIRequest()` function returns "not implemented" error
        - Missing OpenAI API integration
        - No support for OpenAI models (GPT-3.5, GPT-4, etc.)
        
        **Expected Solution:**
        - Implement OpenAI API client
        - Add proper error handling and retry logic
        - Support for different OpenAI models
        - Add configuration options for OpenAI
        
        **Files to Modify:**
        - `internal/core/services/ai/ai_service.go`
        - `internal/core/domain/ai/ai_models.go`
        - Add OpenAI-specific tests
        
        **Acceptance Criteria:**
        - [ ] Implement OpenAI API client
        - [ ] Add model selection support
        - [ ] Implement proper error handling
        - [ ] Add retry logic with exponential backoff
        - [ ] Add comprehensive tests
        - [ ] Update documentation
        
        **Difficulty:** Medium
        **Estimated Time:** 6-8 hours
        
        ## ðŸŽ¯ Technical Details
        
        The issue is in the `makeOpenAIRequest` function around line 293 in `ai_service.go`. Currently, it's just a placeholder that returns an error.
        
        **Suggested Approach:**
        1. Implement HTTP client for OpenAI API
        2. Add proper request/response handling
        3. Implement retry logic with exponential backoff
        4. Add model selection and configuration
        5. Create comprehensive tests
        
        **OpenAI API Endpoints to implement:**
        - Chat completions: `https://api.openai.com/v1/chat/completions`
        - Models list: `https://api.openai.com/v1/models`
        
        ## ðŸ“š Resources
        - [OpenAI API Documentation](https://platform.openai.com/docs/api-reference)
        - [Go HTTP client best practices](https://golang.org/pkg/net/http/)
        - [Exponential backoff in Go](https://github.com/cenkalti/backoff)
